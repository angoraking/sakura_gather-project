name: CI

on:
  schedule:
    - cron: '0 * * * *' # Runs every hour
  workflow_dispatch: # Allows you to manually trigger the workflow from the GitHub UI

env:
  AWS_REGION: "us-east-1"
  DEVOPS_AWS_ACCOUNT_ID: ${{ secrets.DEVOPS_AWS_ACCOUNT_ID }}

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  job_0_build:
    name: 🧪️ 🏗 Unit Test and Build Artifacts ${{ matrix.os }} Python ${{ matrix.python-version }}
    runs-on: "${{ matrix.os }}"
    env:
      USER_ENV_NAME: devops
      DEV_ACC_AWS_REGION: ${{ secrets.DEV_ACC_AWS_REGION }}
      DEV_ACC_AWS_ACCESS_KEY_ID: ${{ secrets.DEV_ACC_AWS_ACCESS_KEY_ID }}
      DEV_ACC_AWS_SECRET_ACCESS_KEY: ${{ secrets.DEV_ACC_AWS_SECRET_ACCESS_KEY }}
      CLOUDFLARE_R2_ENDPOINT: ${{ secrets.CLOUDFLARE_R2_ENDPOINT }}
      CLOUDFLARE_R2_ACCESS_KEY: ${{ secrets.CLOUDFLARE_R2_ACCESS_KEY }}
      CLOUDFLARE_R2_SECRET_KEY: ${{ secrets.CLOUDFLARE_R2_SECRET_KEY }}
    # ref: https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#jobsjob_idstrategymatrix
    strategy:
      # The matrix strategy allows you to run multiple combinations of configurations
      # This will create a separate job for each combination of OS and Python version
      matrix:
        # Define the operating systems to test on
#        os: ["ubuntu-latest", "windows-latest"]
        os: [ "ubuntu-latest", ] # Commented out configurations for quick debugging
#        os: ["windows-latest", ] # Commented out configurations for quick debugging
        # Define the Python versions to test with
        # python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
        python-version: [ "3.13", ] # Commented out configurations for quick debugging
    steps:
      - name: === 💾 PREPARATION ===
        run: echo "PREPARATION"
      - name: Git Clone the Repository
        uses: actions/checkout@v4
      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          disable-retry: true
      - name: 🐍 Setup Python with pip cache
        uses: actions/setup-python@v5
        with:
          python-version: "${{ matrix.python-version }}"
          cache: "pip" # Enable pip dependency caching to speed up future runs
          # Cache dependencies based on this file, which contains Poetry installation requirements
          # This is separate from project dependencies - just for installing Poetry itself
          cache-dependency-path: requirements-poetry.txt
      # Install Poetry using pip from the requirements file
      - name: Install poetry
        run: |
          python -m pip install -r requirements-poetry.txt
          python -m pip install "pywf_internal_proprietary>=0.1.11,<1.0.0"
      # Second Python setup specifically for project dependencies managed by Poetry
      - uses: actions/setup-python@v5
        with:
          python-version: "${{ matrix.python-version }}"
          cache: "poetry" # Enable Poetry dependency caching
          # Use poetry.lock as the cache key - Poetry will only re-download cache if this file changes
          cache-dependency-path: poetry.lock
      # Install project dependencies using Poetry
      - name: "Install dependencies"
        run: |
          set -xe
          pwd
          python -VV
          python -m site
          python bin/g1_t2_s1_venv_create.py
          python bin/g2_t1_s2_poetry_login.py
          python bin/g2_t2_s2_install.py
      # Run pytest with coverage reporting
      - name: "Run Unit Test"
        run: |
          .venv/bin/python run.py
      - name: === 🛑 END OF THE JOB ===
        run: echo "END OF THE JOB"