name: CI

on:
  push: # Workflow will run on any push event to the main branch
    branches: ["main", "doc"]
  pull_request: # Workflow will run on any pull request targeting the main branch
    branches: ["main", "doc"]
  workflow_dispatch: # Allows you to manually trigger the workflow from the GitHub UI

env:
  AWS_REGION: "us-east-1"
  DEVOPS_AWS_ACCOUNT_ID: ${{ secrets.DEVOPS_AWS_ACCOUNT_ID }}

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  job_0_build:
    name: 🧪️ 🏗 Unit Test and Build Artifacts ${{ matrix.os }} Python ${{ matrix.python-version }}
    runs-on: "${{ matrix.os }}"
    env:
      USER_ENV_NAME: devops
    # ref: https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#jobsjob_idstrategymatrix
    strategy:
      # The matrix strategy allows you to run multiple combinations of configurations
      # This will create a separate job for each combination of OS and Python version
      matrix:
        # Define the operating systems to test on
#        os: ["ubuntu-latest", "windows-latest"]
        os: [ "ubuntu-latest", ] # Commented out configurations for quick debugging
#        os: ["windows-latest", ] # Commented out configurations for quick debugging
        # Define the Python versions to test with
        # python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
        python-version: [ "3.11", ] # Commented out configurations for quick debugging
    steps:
      - name: === 💾 PREPARATION ===
        run: echo "PREPARATION"
      - name: Git Clone the Repository
        uses: actions/checkout@v4
      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ secrets.DEVOPS_AWS_ACCOUNT_ID }}:role/ghoidc-esc_aws_codeartifacts_only-devops-us-east-1
          role-session-name: devops_role_session
          aws-region: ${{ env.AWS_REGION }}
          disable-retry: true
      - name: 🛠 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
#      - name: 💾 Install CDK in Node
#        run: |
#          npm install -g aws-cdk@2.1010.0
#          which cdk
#          cdk --version
      - name: 🐍 Setup Python with pip cache
        uses: actions/setup-python@v5
        with:
          python-version: "${{ matrix.python-version }}"
          cache: "pip" # Enable pip dependency caching to speed up future runs
          # Cache dependencies based on this file, which contains Poetry installation requirements
          # This is separate from project dependencies - just for installing Poetry itself
          cache-dependency-path: requirements-poetry.txt
      # Install Poetry using pip from the requirements file
      - name: Install poetry
        run: |
          python -m pip install -r requirements-poetry.txt
          python -m pip install "pywf_internal_proprietary>=0.1.10,<1.0.0"
      # Second Python setup specifically for project dependencies managed by Poetry
      - uses: actions/setup-python@v5
        with:
          python-version: "${{ matrix.python-version }}"
          cache: "poetry" # Enable Poetry dependency caching
          # Use poetry.lock as the cache key - Poetry will only re-download cache if this file changes
          cache-dependency-path: poetry.lock
      # Install project dependencies using Poetry
      - name: "Install dependencies"
        run: |
          set -xe
          pwd
          python -VV
          python -m site
          python bin/g1_t2_s1_venv_create.py
          python bin/g2_t1_s2_poetry_login.py
          python bin/g2_t2_s2_install.py
          python bin/g2_t2_s4_install_test.py
      # Run pytest with coverage reporting
      - name: "Run pytest"
        run: |
          python bin/g3_t2_s1_run_cov_test.py
      # See https://github.com/cloudflare/wrangler-action
      - if: ${env.GITHUB_REF_NAME } == 'doc'
        name: "Build Documentation Website and Publish to Cloudflare"
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          run: |
            python bin/g4_t2_s1_build_doc.py
            python bin/g4_t4_s2_deploy_cloudflare_pages.py
      - name: === 🛑 END OF THE JOB ===
        run: echo "END OF THE JOB"